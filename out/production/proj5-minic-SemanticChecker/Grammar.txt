Lexer Information:


RETURN              "return"
PRINT               "print"
IF                  "if"
ELSE                "else"
WHILE               "while"
BEGIN               "{"
END                 "}"
LPAREN              "("
RPAREN              ")"
LBRACKET            "["
RBRACKET            "]"
NUM                 "num"
BOOL                "bool"
NEW                 "new"
SIZE                "size"
ASSIGN              "<-"
ADD                 "+"
SUB                 "-"
MUL                 "*"
DIV                 "/"
MOD                 "%"
AND                 "and"
OR                  "or"
NOT                 "not"
LT                  "<"
GT                  ">"
LE                  "<="
GE                  ">="
EQ                  "="
NE                  "<>"
SEMI                ";"
COMMA               ","
DOT                 "."
BOOL_LIT            "true"|"false"
NUM_LIT             [0-9]+("."[0-9]+)?
IDENT               [a-zA-Z][a-zA-Z0-9_]*
NEWLINE             \n
WHITESPACE          [ \t\r]+
LINECOMMENT         "%%".*
BLKCOMMENT          "%("[^]*")%"


======================================================================================================
Parser Information:

%right  ASSIGN
%left   OR
%left   AND
%right  NOT
%left   EQ  NE
%left   LE  LT  GE  GT
%left   ADD SUB
%left   MUL DIV MOD

program             ->  decl_list
decl_list           ->  decl_list  decl  |  eps
decl                ->  func_decl
func_decl           ->  type_spec IDENT LPAREN params RPAREN BEGIN local_decls stmt_list END
params              ->  param_list  |  eps
param_list          ->  param_list  COMMA  param  |  param
param               ->  type_spec  IDENT
type_spec           ->  prim_type  |  prim_type  LBRACKET  RBRACKET
prim_type           ->  NUM  |  BOOL
local_decls         ->  local_decls  local_decl  |  eps
local_decl          ->  type_spec  IDENT  SEMI
stmt_list           ->  stmt_list  stmt  |  eps
stmt                ->  assign_stmt  |  print_stmt  |  return_stmt  |  if_stmt  |  while_stmt  |  compound_stmt
assign_stmt         ->  IDENT  ASSIGN  expr  SEMI   |  IDENT  LBRACKET  expr  RBRACKET  ASSIGN  expr  SEMI
print_stmt          ->  PRINT  expr  SEMI
return_stmt         ->  RETURN  expr  SEMI
if_stmt             ->  IF  LPAREN  expr  RPAREN  stmt  ELSE  stmt
while_stmt          ->  WHILE  LPAREN  expr  RPAREN  stmt
compound_stmt       ->  BEGIN  local_decls  stmt_list  END
args                ->  arg_list  |  eps
arg_list            ->  arg_list  COMMA  expr  |  expr
expr                ->  expr  ADD  expr  |  expr  SUB  expr  |  expr  MUL  expr  |  expr  DIV  expr  |  expr  MOD  expr
                     |  expr  EQ   expr  |  expr  NE   expr  |  expr  LE   expr  |  expr  LT   expr  |  expr  GE   expr  |  expr  GT  expr
                     |  expr  AND  expr  |  expr  OR   expr  |  NOT  expr
                     |  LPAREN  expr  RPAREN  |  IDENT  |  NUM_LIT  |  BOOL_LIT
                     |  IDENT  LPAREN  args  RPAREN
                     |  NEW  prim_type  LBRACKET  expr  RBRACKET  |  IDENT  LBRACKET  expr  RBRACKET  |  IDENT  DOT  SIZE


========================================================================================================================
Hint for the return types of non-terminal functions to build parse tree

program         =>      ParseTree.Program
decl_list       => List<ParseTree.FuncDecl>
decl            =>      ParseTree.FuncDecl
func_decl       =>      ParseTree.FuncDecl
params          => List<ParseTree.Param>
param_list      => List<ParseTree.Param>
param           =>      ParseTree.Param
type_spec       =>      ParseTree.TypeSpec
prim_type       =>      ParseTree.TypeSpec
local_decls     => List<ParseTree.LocalDecl>
local_decl      =>      ParseTree.LocalDecl
stmt_list       => List<ParseTree.Stmt>
stmt            =>      ParseTree.Stmt
assign_stmt     =>      ParseTree.AssignStmt or ParseTree.AssignStmtForArray
print_stmt      =>      ParseTree.PrintStmt
return_stmt     =>      ParseTree.ReturnStmt
if_stmt         =>      ParseTree.IfStmt
while_stmt      =>      ParseTree.WhileStmt
compound_stmt   =>      ParseTree.CompoundStmt
args            => List<ParseTree.Arg>
arg_list        => List<ParseTree.Arg>
expr            =>      classes derived from ParseTree.Expr
                            : ExprAdd, ExprSub, ExprMul, ExprDiv, ExprMod,
                              ExprEq, ExprNe, ExprLe, ExprLt, ExprGe, ExprGt,
                              ExprAnd, ExprOr, ExprNot,
                              ExprParen,
                              ExprIdent, ExprNumLit, ExprBoolLit,
                              ExprFuncCall,
                              ExprArrayNew, ExprArrayElem, ExprArraySize,


========================================================================================================================
Semantic Error Message Forms:

"The program must have one main function that returns num value and has no parameters."

"Identifier ________ is already defined."
"Identifier ________ is not defined."
"Identifier ________ should be a variable."
"Identifier ________ should be an array variable."
"Identifier ________ should be a function."

"Variable ________ should have ________ value, instead of ________ value."

"Element of array ________ should have a ________ value, instead of a ________ value."
"Array index must be num value."

"Function ________() should return at least one value."
"Function ________() should return a ________ value, instead of a ________ value."
"Function ________() should be called with the correct number of arguments."
"The ________ argument of function ________() should be ________ value, instead of ________ value."

"Condition of if or while statement should be a bool value."

"Binary operation ________ cannot be used with ________ and ________ values."
"Unary operation ________ cannot be used with ________ value."
