Success: no semantic error is found.

================================================================================
Code with indentations:
bool printstack(num[] stk)
{
    num i;
    num[] arr;
    arr <- new num[stk[1.0]];
    i <- 0.0;
    while( i < arr.size )
    {
        arr[i] <- stk[i + 2.0];
        i <- i + 1.0;
    }
    print arr;
    return true;
}

bool push(num[] stk, num val)
{
    stk[1.0] <- stk[1.0] + 1.0;
    stk[stk[1.0] + 1.0] <- val;
    return true;
}

num pop(num[] stk)
{
    num top;
    top <- stk[stk[1.0] + 1.0];
    stk[1.0] <- stk[1.0] - 1.0;
    return top;
}

bool printhanoi_sel(num sel, num[] peg_a, num[] peg_b, num[] peg_c)
{
    bool gbg;
    if( sel = peg_a[0.0] )
    {
        gbg <- printstack(peg_a);
    }
    else
    {
    }
    if( sel = peg_b[0.0] )
    {
        gbg <- printstack(peg_b);
    }
    else
    {
    }
    if( sel = peg_c[0.0] )
    {
        gbg <- printstack(peg_c);
    }
    else
    {
    }
    return true;
}

bool printhanoi(num[] peg_a, num[] peg_b, num[] peg_c)
{
    bool gbg;
    gbg <- printhanoi_sel(1.0,peg_a,peg_b,peg_c);
    gbg <- printhanoi_sel(2.0,peg_a,peg_b,peg_c);
    gbg <- printhanoi_sel(3.0,peg_a,peg_b,peg_c);
    print 9.99999999999999;
    return true;
}

num hanoi(num n, num[] start, num[] aux, num[] target)
{
    num step;
    bool gbg;
    step <- 0.0;
    if( n > 0.0 )
    {
        step <- step + hanoi(n - 1.0,start,target,aux);
        gbg <- push(target,pop(start));
        gbg <- printhanoi(start,aux,target);
        step <- step + 1.0;
        step <- step + hanoi(n - 1.0,aux,start,target);
    }
    else
    {
    }
    return step;
}

num main()
{
    num[] peg_a;
    num[] peg_b;
    num[] peg_c;
    num n;
    num i;
    num steps;
    bool gbg;
    peg_a <- new num[10.0];
    peg_a[0.0] <- 1.0;
    peg_a[1.0] <- 0.0;
    peg_b <- new num[10.0];
    peg_b[0.0] <- 2.0;
    peg_b[1.0] <- 0.0;
    peg_c <- new num[10.0];
    peg_c[0.0] <- 3.0;
    peg_c[1.0] <- 0.0;
    n <- 5.0;
    peg_a[1.0] <- n;
    i <- 0.0;
    while( i < n )
    {
        peg_a[i + 2.0] <- n - i;
        i <- i + 1.0;
    }
    gbg <- printhanoi(peg_a,peg_b,peg_c);
    steps <- hanoi(n,peg_a,peg_b,peg_c);
    print steps;
    return 1.0;
}
================================================================================
Code with indentations and comments for running environment:
bool printstack(num[] stk)
%% Relative address of parameter stk from this function call base pointer is -1.
{
    num i; %% relative address of local variable i from this func call base pointer is 1.
    num[] arr; %% relative address of local variable arr from this func call base pointer is 2.
    arr %(addr:2)%  <- new num[stk %(addr:-1)% [1.0]];
    i %(addr:1)%  <- 0.0;
    while( i %(addr:1)%  < arr %(addr:2)% .size )
    {
        arr %(addr:2)% [i %(addr:1)% ] <- stk %(addr:-1)% [i %(addr:1)%  + 2.0];
        i %(addr:1)%  <- i %(addr:1)%  + 1.0;
    }
    print arr %(addr:2)% ;
    return true;
}

bool push(num[] stk, num val)
%% Relative address of parameter stk from this function call base pointer is -1.
%% Relative address of parameter val from this function call base pointer is -2.
{
    stk %(addr:-1)% [1.0] <- stk %(addr:-1)% [1.0] + 1.0;
    stk %(addr:-1)% [stk %(addr:-1)% [1.0] + 1.0] <- val %(addr:-2)% ;
    return true;
}

num pop(num[] stk)
%% Relative address of parameter stk from this function call base pointer is -1.
{
    num top; %% relative address of local variable top from this func call base pointer is 1.
    top %(addr:1)%  <- stk %(addr:-1)% [stk %(addr:-1)% [1.0] + 1.0];
    stk %(addr:-1)% [1.0] <- stk %(addr:-1)% [1.0] - 1.0;
    return top %(addr:1)% ;
}

bool printhanoi_sel(num sel, num[] peg_a, num[] peg_b, num[] peg_c)
%% Relative address of parameter sel from this function call base pointer is -1.
%% Relative address of parameter peg_a from this function call base pointer is -2.
%% Relative address of parameter peg_b from this function call base pointer is -3.
%% Relative address of parameter peg_c from this function call base pointer is -4.
{
    bool gbg; %% relative address of local variable gbg from this func call base pointer is 1.
    if( sel %(addr:-1)%  = peg_a %(addr:-2)% [0.0] )
    {
        gbg %(addr:1)%  <- printstack(peg_a %(addr:-2)% );
    }
    else
    {
    }
    if( sel %(addr:-1)%  = peg_b %(addr:-3)% [0.0] )
    {
        gbg %(addr:1)%  <- printstack(peg_b %(addr:-3)% );
    }
    else
    {
    }
    if( sel %(addr:-1)%  = peg_c %(addr:-4)% [0.0] )
    {
        gbg %(addr:1)%  <- printstack(peg_c %(addr:-4)% );
    }
    else
    {
    }
    return true;
}

bool printhanoi(num[] peg_a, num[] peg_b, num[] peg_c)
%% Relative address of parameter peg_a from this function call base pointer is -1.
%% Relative address of parameter peg_b from this function call base pointer is -2.
%% Relative address of parameter peg_c from this function call base pointer is -3.
{
    bool gbg; %% relative address of local variable gbg from this func call base pointer is 1.
    gbg %(addr:1)%  <- printhanoi_sel(1.0,peg_a %(addr:-1)% ,peg_b %(addr:-2)% ,peg_c %(addr:-3)% );
    gbg %(addr:1)%  <- printhanoi_sel(2.0,peg_a %(addr:-1)% ,peg_b %(addr:-2)% ,peg_c %(addr:-3)% );
    gbg %(addr:1)%  <- printhanoi_sel(3.0,peg_a %(addr:-1)% ,peg_b %(addr:-2)% ,peg_c %(addr:-3)% );
    print 9.99999999999999;
    return true;
}

num hanoi(num n, num[] start, num[] aux, num[] target)
%% Relative address of parameter n from this function call base pointer is -1.
%% Relative address of parameter start from this function call base pointer is -2.
%% Relative address of parameter aux from this function call base pointer is -3.
%% Relative address of parameter target from this function call base pointer is -4.
{
    num step; %% relative address of local variable step from this func call base pointer is 1.
    bool gbg; %% relative address of local variable gbg from this func call base pointer is 2.
    step %(addr:1)%  <- 0.0;
    if( n %(addr:-1)%  > 0.0 )
    {
        step %(addr:1)%  <- step %(addr:1)%  + hanoi(n %(addr:-1)%  - 1.0,start %(addr:-2)% ,target %(addr:-4)% ,aux %(addr:-3)% );
        gbg %(addr:2)%  <- push(target %(addr:-4)% ,pop(start %(addr:-2)% ));
        gbg %(addr:2)%  <- printhanoi(start %(addr:-2)% ,aux %(addr:-3)% ,target %(addr:-4)% );
        step %(addr:1)%  <- step %(addr:1)%  + 1.0;
        step %(addr:1)%  <- step %(addr:1)%  + hanoi(n %(addr:-1)%  - 1.0,aux %(addr:-3)% ,start %(addr:-2)% ,target %(addr:-4)% );
    }
    else
    {
    }
    return step %(addr:1)% ;
}

num main()
{
    num[] peg_a; %% relative address of local variable peg_a from this func call base pointer is 1.
    num[] peg_b; %% relative address of local variable peg_b from this func call base pointer is 2.
    num[] peg_c; %% relative address of local variable peg_c from this func call base pointer is 3.
    num n; %% relative address of local variable n from this func call base pointer is 4.
    num i; %% relative address of local variable i from this func call base pointer is 5.
    num steps; %% relative address of local variable steps from this func call base pointer is 6.
    bool gbg; %% relative address of local variable gbg from this func call base pointer is 7.
    peg_a %(addr:1)%  <- new num[10.0];
    peg_a %(addr:1)% [0.0] <- 1.0;
    peg_a %(addr:1)% [1.0] <- 0.0;
    peg_b %(addr:2)%  <- new num[10.0];
    peg_b %(addr:2)% [0.0] <- 2.0;
    peg_b %(addr:2)% [1.0] <- 0.0;
    peg_c %(addr:3)%  <- new num[10.0];
    peg_c %(addr:3)% [0.0] <- 3.0;
    peg_c %(addr:3)% [1.0] <- 0.0;
    n %(addr:4)%  <- 5.0;
    peg_a %(addr:1)% [1.0] <- n %(addr:4)% ;
    i %(addr:5)%  <- 0.0;
    while( i %(addr:5)%  < n %(addr:4)%  )
    {
        peg_a %(addr:1)% [i %(addr:5)%  + 2.0] <- n %(addr:4)%  - i %(addr:5)% ;
        i %(addr:5)%  <- i %(addr:5)%  + 1.0;
    }
    gbg %(addr:7)%  <- printhanoi(peg_a %(addr:1)% ,peg_b %(addr:2)% ,peg_c %(addr:3)% );
    steps %(addr:6)%  <- hanoi(n %(addr:4)% ,peg_a %(addr:1)% ,peg_b %(addr:2)% ,peg_c %(addr:3)% );
    print steps %(addr:6)% ;
    return 1.0;
}
================================================================================
Execute:
[5.0, 4.0, 3.0, 2.0, 1.0]
[]
[]
9.99999999999999
[5.0, 4.0, 3.0, 2.0]
[]
[1.0]
9.99999999999999
[5.0, 4.0, 3.0]
[2.0]
[1.0]
9.99999999999999
[5.0, 4.0, 3.0]
[2.0, 1.0]
[]
9.99999999999999
[5.0, 4.0]
[2.0, 1.0]
[3.0]
9.99999999999999
[5.0, 4.0, 1.0]
[2.0]
[3.0]
9.99999999999999
[5.0, 4.0, 1.0]
[]
[3.0, 2.0]
9.99999999999999
[5.0, 4.0]
[]
[3.0, 2.0, 1.0]
9.99999999999999
[5.0]
[4.0]
[3.0, 2.0, 1.0]
9.99999999999999
[5.0]
[4.0, 1.0]
[3.0, 2.0]
9.99999999999999
[5.0, 2.0]
[4.0, 1.0]
[3.0]
9.99999999999999
[5.0, 2.0, 1.0]
[4.0]
[3.0]
9.99999999999999
[5.0, 2.0, 1.0]
[4.0, 3.0]
[]
9.99999999999999
[5.0, 2.0]
[4.0, 3.0]
[1.0]
9.99999999999999
[5.0]
[4.0, 3.0, 2.0]
[1.0]
9.99999999999999
[5.0]
[4.0, 3.0, 2.0, 1.0]
[]
9.99999999999999
[]
[4.0, 3.0, 2.0, 1.0]
[5.0]
9.99999999999999
[1.0]
[4.0, 3.0, 2.0]
[5.0]
9.99999999999999
[1.0]
[4.0, 3.0]
[5.0, 2.0]
9.99999999999999
[]
[4.0, 3.0]
[5.0, 2.0, 1.0]
9.99999999999999
[3.0]
[4.0]
[5.0, 2.0, 1.0]
9.99999999999999
[3.0]
[4.0, 1.0]
[5.0, 2.0]
9.99999999999999
[3.0, 2.0]
[4.0, 1.0]
[5.0]
9.99999999999999
[3.0, 2.0, 1.0]
[4.0]
[5.0]
9.99999999999999
[3.0, 2.0, 1.0]
[]
[5.0, 4.0]
9.99999999999999
[3.0, 2.0]
[]
[5.0, 4.0, 1.0]
9.99999999999999
[3.0]
[2.0]
[5.0, 4.0, 1.0]
9.99999999999999
[3.0]
[2.0, 1.0]
[5.0, 4.0]
9.99999999999999
[]
[2.0, 1.0]
[5.0, 4.0, 3.0]
9.99999999999999
[1.0]
[2.0]
[5.0, 4.0, 3.0]
9.99999999999999
[1.0]
[]
[5.0, 4.0, 3.0, 2.0]
9.99999999999999
[]
[]
[5.0, 4.0, 3.0, 2.0, 1.0]
9.99999999999999
31.0
Returned value by main: 1.0
================================================================================
